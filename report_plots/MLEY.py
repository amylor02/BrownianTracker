import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import curve_fit
import scienceplots
plt.style.use(['science'])

data = """

-33.410888671875 73.4173583984375 30
-81.48046875 6.85882568359375 30
-70.4130859375 44.95709228515625 30
-36.44677734375 14.303802490234375 30
-72.17333984375 12.21014404296875 30
-68.0098876953125 77.5653076171875 30
12.199951171875 -7.5523681640625 30
-10.36572265625 -21.27056884765625 30
-40.467041015625 45.10595703125 30
-19.4039306640625 32.43670654296875 30
-17.871826171875 82.0703125 30
-0.98876953125 -3.79779052734375 30
-5.6739501953125 9.9891357421875 30
-25.46319580078125 39.45281982421875 30
10.47943115234375 83.87567138671875 30
-13.5704345703125 28.5904541015625 30
-30.236663818359375 37.0361328125 30
-92.699462890625 71.82470703125 30
-70.5816650390625 61.7386474609375 30
-63.38714599609375 48.68994140625 30
-35.1732177734375 117.8896484375 30
-61.944305419921875 49.260498046875 30
-71.786376953125 15.574462890625 30
-131.50414276123047 125.0272216796875 30
-40.06103515625 89.55859375 30
-32.8160400390625 10.0577392578125 30
-75.7127685546875 18.15716552734375 30
-21.7882080078125 20.785736083984375 30
-102.4560546875 54.45697021484375 30
-81.96484375 4.86199951171875 30
-106.563232421875 55.3878173828125 30
-25.3330078125 17.3101806640625 30
-92.2716064453125 73.66204833984375 30
-72.259033203125 11.923828125 30
-3.2795305252075195 -4.849639892578125 30
-30.095169067382812 28.230224609375 30
-17.340087890625 29.91650390625 30
-74.6947021484375 126.072509765625 30
-14.24383544921875 6.84991455078125 30
-40.4212646484375 52.6226806640625 30
-95.802734375 86.329833984375 30
-82.34228515625 49.7374267578125 30
-20.216796875 114.08740234375 30
-27.1865234375 54.45882034301758 30
-27.4580078125 0.804443359375 30
-22.492431640625 3.558197021484375 30
-12.89111328125 20.2005615234375 30
2.467041015625 72.42236328125 30
-99.43460083007812 140.0357666015625 30
9.162109375 18.96002197265625 30
-16.200439453125 3.04058837890625 30
-10.1927490234375 7.408935546875 30
-17.72607421875 -7.5152587890625 30
0.279052734375 2.9349365234375 30
-17.0712890625 -4.2449798583984375 30
-21.03515625 20.709564208984375 30
-5.11370849609375 -4.0048828125 30
-10.8323974609375 4.52606201171875 30
-37.63128662109375 35.93896484375 30
-2.626220703125 28.436767578125 30
-61.5279541015625 42.679443359375 30
-66.54461669921875 75.9439697265625 30
-22.430908203125 -17.2899169921875 30
-22.2574462890625 2.33740234375 30
5.71044921875 4.2733154296875 30
-8.782958984375 1.983642578125 30
-2.379638671875 26.324493408203125 30
-14.85205078125 17.9554443359375 30
-63.7462158203125 12.04345703125 30
-26.91943359375 -13.171051025390625 30
-0.53173828125 10.800537109375 29
3.302093505859375 16.300537109375 30
-2.810211181640625 1.911865234375 30
-11.29388427734375 0.790283203125 30
42.407470703125 -10.6324462890625 30
17.175537109375 -51.5380859375 30
-4.4677734375 18.008056640625 30
-23.7598876953125 18.6988525390625 30
-14.4000244140625 -15.2646484375 30
-13.3228759765625 -7.34619140625 30
14.8905029296875 44.406005859375 30
46.33349609375 18.518310546875 30
-8.2752685546875 -28.0518798828125 30
1.937255859375 51.0267333984375 30
43.2930908203125 -46.451141357421875 30
-31.0186767578125 15.0811767578125 30
34.212158203125 0.74334716796875 30
4.63671875 -20.301467895507812 30
-22.4580078125 23.5352783203125 30
13.831298828125 -7.23681640625 30
-15.928466796875 -26.79052734375 30
26.0068359375 -21.59429931640625 30
-4.572509765625 -15.1962890625 30
0.7813720703125 -9.2723388671875 30
55.27374267578125 75.5704345703125 30
33.9420166015625 -17.756591796875 30
-3.470703125 -31.5323486328125 30
21.4156494140625 13.4522705078125 30
60.755615234375 9.32891845703125 30
-52.570556640625 -34.3450927734375 30
-14.834381103515625 -10.0623779296875 30
14.596923828125 6.499267578125 30
13.3106689453125 2.4862060546875 30
46.8369140625 4.455810546875 30
22.532867431640625 -46.5130615234375 30
28.525421142578125 16.926513671875 30
-27.10870361328125 -34.713623046875 30
24.026123046875 37.78662109375 30
72.75 -8.3209228515625 30
54.789794921875 -16.493896484375 30
31.076534271240234 -18.508056640625 30
35.0777587890625 14.300048828125 30
-12.5693359375 16.7650146484375 30
12.939300537109375 3.989990234375 30
26.13482666015625 -2.39752197265625 30
29.88671875 8.660354614257812 30
28.568695068359375 -22.3021240234375 30
-11.3267822265625 1.27801513671875 30
-13.2471923828125 -0.0113525390625 30
5.41552734375 1.34185791015625 30
15.668212890625 7.0760498046875 30
3.56494140625 0.111602783203125 30
"""
lines = data.strip().split('\n')
displacements = []

for line in lines:
    parts = line.split()

    displacement = float(parts[0]) * 10**(-7)
    displacements.append(displacement)


hist, edges, _ = plt.hist(displacements, bins=50,
                          edgecolor='black', alpha=0.7, label='Data')


def full_gaussian(x, A, mu, sigma):
    return A * np.exp(-(x - mu)**2 / (2 * sigma**2))


A_guess = max(hist)
mu_guess = 0.0
sigma_guess = np.std(displacements)


params, covariance = curve_fit(
    full_gaussian, edges[:-1], hist, p0=[A_guess, mu_guess, sigma_guess])


sigma_fit = params[2]
sigma_fit_std_error = np.sqrt(np.diag(covariance))[2]


x_fit = np.linspace(min(displacements), max(displacements), 10000)

y_fit = full_gaussian(x_fit, *params)


plt.plot(x_fit, y_fit, 'r-', label='MLE Fit')


peak_x = x_fit[np.argmax(y_fit)]
peak_x_std_error = np.sqrt(np.diag(covariance))[1]


plt.axvline(peak_x, color='green', linestyle='--', label='Peak')
x_fit = np.linspace(min(displacements), max(displacements), 10000)


y_fit = full_gaussian(x_fit, *params)


y_upper = full_gaussian(
    x_fit, params[0] + sigma_fit, params[1], params[2] + sigma_fit_std_error)
y_lower = full_gaussian(
    x_fit, params[0] - sigma_fit, params[1], params[2] - sigma_fit_std_error)


plt.fill_between(x_fit, y_lower, y_upper, color='green',
                 alpha=0.2, label=r'Error P.B.')

print(f'Peak: {peak_x:.12f} ± {peak_x_std_error:.12f}')
print(f'Sigma: {sigma_fit:.12f} ±{sigma_fit_std_error:.12f}')


plt.xlim(-0.000007, 0.000007)

plt.xlabel('Displacement in the Y axis (m)')
plt.ylabel('Counts')
plt.grid(True)
plt.legend(loc='upper left')


plt.show()
